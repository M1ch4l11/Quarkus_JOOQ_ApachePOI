/*
 * This file is generated by jOOQ.
 */
package generated.market.tables;


import generated.market.Keys;
import generated.market.Market;
import generated.market.tables.records.AdressRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Adress extends TableImpl<AdressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>market.Adress</code>
     */
    public static final Adress ADRESS = new Adress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdressRecord> getRecordType() {
        return AdressRecord.class;
    }

    /**
     * The column <code>market.Adress.id_adress</code>.
     */
    public final TableField<AdressRecord, Integer> ID_ADRESS = createField(DSL.name("id_adress"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>market.Adress.city</code>.
     */
    public final TableField<AdressRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>market.Adress.street</code>.
     */
    public final TableField<AdressRecord, String> STREET = createField(DSL.name("street"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>market.Adress.number</code>.
     */
    public final TableField<AdressRecord, Integer> NUMBER = createField(DSL.name("number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>market.Adress.PSČ</code>.
     */
    public final TableField<AdressRecord, Integer> PSČ = createField(DSL.name("PSČ"), SQLDataType.INTEGER.nullable(false), this, "");

    private Adress(Name alias, Table<AdressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Adress(Name alias, Table<AdressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>market.Adress</code> table reference
     */
    public Adress(String alias) {
        this(DSL.name(alias), ADRESS);
    }

    /**
     * Create an aliased <code>market.Adress</code> table reference
     */
    public Adress(Name alias) {
        this(alias, ADRESS);
    }

    /**
     * Create a <code>market.Adress</code> table reference
     */
    public Adress() {
        this(DSL.name("Adress"), null);
    }

    public <O extends Record> Adress(Table<O> child, ForeignKey<O, AdressRecord> key) {
        super(child, key, ADRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Market.MARKET;
    }

    @Override
    public Identity<AdressRecord, Integer> getIdentity() {
        return (Identity<AdressRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdressRecord> getPrimaryKey() {
        return Keys.ADRESS_PKEY;
    }

    @Override
    public Adress as(String alias) {
        return new Adress(DSL.name(alias), this);
    }

    @Override
    public Adress as(Name alias) {
        return new Adress(alias, this);
    }

    @Override
    public Adress as(Table<?> alias) {
        return new Adress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Adress rename(String name) {
        return new Adress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adress rename(Name name) {
        return new Adress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adress rename(Table<?> name) {
        return new Adress(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
