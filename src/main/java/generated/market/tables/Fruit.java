/*
 * This file is generated by jOOQ.
 */
package generated.market.tables;


import generated.market.Keys;
import generated.market.Market;
import generated.market.tables.records.FruitRecord;

import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fruit extends TableImpl<FruitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>market.Fruit</code>
     */
    public static final Fruit FRUIT = new Fruit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FruitRecord> getRecordType() {
        return FruitRecord.class;
    }

    /**
     * The column <code>market.Fruit.id_fruit</code>.
     */
    public final TableField<FruitRecord, Integer> ID_FRUIT = createField(DSL.name("id_fruit"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>market.Fruit.name</code>.
     */
    public final TableField<FruitRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>market.Fruit.made</code>.
     */
    public final TableField<FruitRecord, String> MADE = createField(DSL.name("made"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>market.Fruit.date</code>.
     */
    public final TableField<FruitRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>market.Fruit.kg</code>.
     */
    public final TableField<FruitRecord, Double> KG = createField(DSL.name("kg"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Fruit(Name alias, Table<FruitRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fruit(Name alias, Table<FruitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>market.Fruit</code> table reference
     */
    public Fruit(String alias) {
        this(DSL.name(alias), FRUIT);
    }

    /**
     * Create an aliased <code>market.Fruit</code> table reference
     */
    public Fruit(Name alias) {
        this(alias, FRUIT);
    }

    /**
     * Create a <code>market.Fruit</code> table reference
     */
    public Fruit() {
        this(DSL.name("Fruit"), null);
    }

    public <O extends Record> Fruit(Table<O> child, ForeignKey<O, FruitRecord> key) {
        super(child, key, FRUIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Market.MARKET;
    }

    @Override
    public Identity<FruitRecord, Integer> getIdentity() {
        return (Identity<FruitRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FruitRecord> getPrimaryKey() {
        return Keys.FRUIT_PKEY;
    }

    @Override
    public Fruit as(String alias) {
        return new Fruit(DSL.name(alias), this);
    }

    @Override
    public Fruit as(Name alias) {
        return new Fruit(alias, this);
    }

    @Override
    public Fruit as(Table<?> alias) {
        return new Fruit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fruit rename(String name) {
        return new Fruit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fruit rename(Name name) {
        return new Fruit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fruit rename(Table<?> name) {
        return new Fruit(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDate, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super LocalDate, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super LocalDate, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
