/*
 * This file is generated by jOOQ.
 */
package generated.market.tables.records;


import generated.market.tables.Adress;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdressRecord extends UpdatableRecordImpl<AdressRecord> implements Record5<Integer, String, String, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>market.Adress.id_adress</code>.
     */
    public void setIdAdress(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>market.Adress.id_adress</code>.
     */
    public Integer getIdAdress() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>market.Adress.city</code>.
     */
    public void setCity(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>market.Adress.city</code>.
     */
    public String getCity() {
        return (String) get(1);
    }

    /**
     * Setter for <code>market.Adress.street</code>.
     */
    public void setStreet(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>market.Adress.street</code>.
     */
    public String getStreet() {
        return (String) get(2);
    }

    /**
     * Setter for <code>market.Adress.number</code>.
     */
    public void setNumber(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>market.Adress.number</code>.
     */
    public Integer getNumber() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>market.Adress.PSČ</code>.
     */
    public void setPsč(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>market.Adress.PSČ</code>.
     */
    public Integer getPsč() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, String, Integer, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Adress.ADRESS.ID_ADRESS;
    }

    @Override
    public Field<String> field2() {
        return Adress.ADRESS.CITY;
    }

    @Override
    public Field<String> field3() {
        return Adress.ADRESS.STREET;
    }

    @Override
    public Field<Integer> field4() {
        return Adress.ADRESS.NUMBER;
    }

    @Override
    public Field<Integer> field5() {
        return Adress.ADRESS.PSČ;
    }

    @Override
    public Integer component1() {
        return getIdAdress();
    }

    @Override
    public String component2() {
        return getCity();
    }

    @Override
    public String component3() {
        return getStreet();
    }

    @Override
    public Integer component4() {
        return getNumber();
    }

    @Override
    public Integer component5() {
        return getPsč();
    }

    @Override
    public Integer value1() {
        return getIdAdress();
    }

    @Override
    public String value2() {
        return getCity();
    }

    @Override
    public String value3() {
        return getStreet();
    }

    @Override
    public Integer value4() {
        return getNumber();
    }

    @Override
    public Integer value5() {
        return getPsč();
    }

    @Override
    public AdressRecord value1(Integer value) {
        setIdAdress(value);
        return this;
    }

    @Override
    public AdressRecord value2(String value) {
        setCity(value);
        return this;
    }

    @Override
    public AdressRecord value3(String value) {
        setStreet(value);
        return this;
    }

    @Override
    public AdressRecord value4(Integer value) {
        setNumber(value);
        return this;
    }

    @Override
    public AdressRecord value5(Integer value) {
        setPsč(value);
        return this;
    }

    @Override
    public AdressRecord values(Integer value1, String value2, String value3, Integer value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AdressRecord
     */
    public AdressRecord() {
        super(Adress.ADRESS);
    }

    /**
     * Create a detached, initialised AdressRecord
     */
    public AdressRecord(Integer idAdress, String city, String street, Integer number, Integer psč) {
        super(Adress.ADRESS);

        setIdAdress(idAdress);
        setCity(city);
        setStreet(street);
        setNumber(number);
        setPsč(psč);
        resetChangedOnNotNull();
    }
}
