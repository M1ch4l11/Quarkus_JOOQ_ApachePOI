/*
 * This file is generated by jOOQ.
 */
package generated.market.tables.records;


import generated.market.tables.Order;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderRecord extends UpdatableRecordImpl<OrderRecord> implements Record7<Integer, Integer, Integer, LocalDate, LocalDate, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>market.Order.id_order</code>.
     */
    public void setIdOrder(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>market.Order.id_order</code>.
     */
    public Integer getIdOrder() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>market.Order.id_fruit</code>.
     */
    public void setIdFruit(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>market.Order.id_fruit</code>.
     */
    public Integer getIdFruit() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>market.Order.id_customer</code>.
     */
    public void setIdCustomer(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>market.Order.id_customer</code>.
     */
    public Integer getIdCustomer() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>market.Order.date_of_order</code>.
     */
    public void setDateOfOrder(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for <code>market.Order.date_of_order</code>.
     */
    public LocalDate getDateOfOrder() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for <code>market.Order.date_of_completed</code>.
     */
    public void setDateOfCompleted(LocalDate value) {
        set(4, value);
    }

    /**
     * Getter for <code>market.Order.date_of_completed</code>.
     */
    public LocalDate getDateOfCompleted() {
        return (LocalDate) get(4);
    }

    /**
     * Setter for <code>market.Order.kg</code>.
     */
    public void setKg(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>market.Order.kg</code>.
     */
    public Double getKg() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>market.Order.price</code>.
     */
    public void setPrice(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>market.Order.price</code>.
     */
    public Double getPrice() {
        return (Double) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, LocalDate, LocalDate, Double, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, Integer, Integer, LocalDate, LocalDate, Double, Double> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Order.ORDER.ID_ORDER;
    }

    @Override
    public Field<Integer> field2() {
        return Order.ORDER.ID_FRUIT;
    }

    @Override
    public Field<Integer> field3() {
        return Order.ORDER.ID_CUSTOMER;
    }

    @Override
    public Field<LocalDate> field4() {
        return Order.ORDER.DATE_OF_ORDER;
    }

    @Override
    public Field<LocalDate> field5() {
        return Order.ORDER.DATE_OF_COMPLETED;
    }

    @Override
    public Field<Double> field6() {
        return Order.ORDER.KG;
    }

    @Override
    public Field<Double> field7() {
        return Order.ORDER.PRICE;
    }

    @Override
    public Integer component1() {
        return getIdOrder();
    }

    @Override
    public Integer component2() {
        return getIdFruit();
    }

    @Override
    public Integer component3() {
        return getIdCustomer();
    }

    @Override
    public LocalDate component4() {
        return getDateOfOrder();
    }

    @Override
    public LocalDate component5() {
        return getDateOfCompleted();
    }

    @Override
    public Double component6() {
        return getKg();
    }

    @Override
    public Double component7() {
        return getPrice();
    }

    @Override
    public Integer value1() {
        return getIdOrder();
    }

    @Override
    public Integer value2() {
        return getIdFruit();
    }

    @Override
    public Integer value3() {
        return getIdCustomer();
    }

    @Override
    public LocalDate value4() {
        return getDateOfOrder();
    }

    @Override
    public LocalDate value5() {
        return getDateOfCompleted();
    }

    @Override
    public Double value6() {
        return getKg();
    }

    @Override
    public Double value7() {
        return getPrice();
    }

    @Override
    public OrderRecord value1(Integer value) {
        setIdOrder(value);
        return this;
    }

    @Override
    public OrderRecord value2(Integer value) {
        setIdFruit(value);
        return this;
    }

    @Override
    public OrderRecord value3(Integer value) {
        setIdCustomer(value);
        return this;
    }

    @Override
    public OrderRecord value4(LocalDate value) {
        setDateOfOrder(value);
        return this;
    }

    @Override
    public OrderRecord value5(LocalDate value) {
        setDateOfCompleted(value);
        return this;
    }

    @Override
    public OrderRecord value6(Double value) {
        setKg(value);
        return this;
    }

    @Override
    public OrderRecord value7(Double value) {
        setPrice(value);
        return this;
    }

    @Override
    public OrderRecord values(Integer value1, Integer value2, Integer value3, LocalDate value4, LocalDate value5, Double value6, Double value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrderRecord
     */
    public OrderRecord() {
        super(Order.ORDER);
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    public OrderRecord(Integer idOrder, Integer idFruit, Integer idCustomer, LocalDate dateOfOrder, LocalDate dateOfCompleted, Double kg, Double price) {
        super(Order.ORDER);

        setIdOrder(idOrder);
        setIdFruit(idFruit);
        setIdCustomer(idCustomer);
        setDateOfOrder(dateOfOrder);
        setDateOfCompleted(dateOfCompleted);
        setKg(kg);
        setPrice(price);
        resetChangedOnNotNull();
    }
}
